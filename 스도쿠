#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int arr[9][9];
vector<pair<int, int>> point;
int n, cnt = 0;
bool flag = false;

bool check(pair<int,int> p) { // 값 추가 여부 확인하는 함수
    int x = p.first / 3, y = p.second / 3;
    for (int i = 0; i < 9; i++) {
        if (arr[p.first][p.second] == arr[p.first][i] && i != p.second) {
            return false;
        }
        if (arr[p.first][p.second] == arr[i][p.second] && i != p.first) {
            return false;
        }
    } // 행과 열 부분에 같은 값이 있는지 확인
    for (int i = x * 3; i < x * 3 + 3; i++) {
        for (int j = y * 3; j < y * 3 + 3; j++) { // 해당 구역의 첫 번째 좌표로 이동함
            if (arr[i][j] == arr[p.first][p.second]) {
                if (i != p.first && j != p.second) {
                    return false;
                }
            }
        }
    } // 해당 구역에 같은 값이 있는지 확인
    return true;
}

void dfs(int depth) {
    if (depth == cnt) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                cout << arr[i][j] << ' ';
            }
            cout << '\n';
        }
        flag = true;
        return;
    }
    else {
        for (int i = 1; i <= 9; i++) {
            arr[point[depth].first][point[depth].second] = i;
            if (check(point[depth]))
                dfs(depth + 1);
            if (flag)
                return; // 빈칸이 모두 채워졌어도 반복문이 안끝난 경우가 있을 수 있음.
        }
        arr[point[depth].first][point[depth].second] = 0; // 빈칸에 아무 숫자를 넣으면 꼬이는 경우가 있어 그럴 경우엔 값을 비워준다.
        return; // 함수를 종료시켜 이전 함수호출스텍으로 돌아가 다음 반복문을 수행해 숫자를 다시 찾는다.
    }
}

int main(void) {
    ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

    pair<int, int> tmp;
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            cin >> arr[i][j];
            if (arr[i][j] == 0) {
                tmp.first = i;
                tmp.second = j; // tmp pair에 좌표값 저장
                cnt++; // 반복해야할 횟수 저장
                point.push_back(tmp); // point pair vector에 좌표값 저장
            }
        }
    }
    dfs(0);
}
